#!/static/ash
#
# INSERT General Startup Script
# (C) Klaus Knopper <knoppix@knopper.net>
# Modifications for INSERT:
# (C) by Matthias Mikuletz <mm@inside-security.de>
#
# Note by Steven Shiau <steven _at_ nchc org tw>
# This code is modified from http://cdprojekte.mattiasschlenker.de/Public/DSL-frominitrd/2.2b-0.0/script/. Thanks to them.
# This script only works for INSERT diskless environment.
#
# This script needs some of the builtin ash commands (if, test, ...)
# mount/umount, insmod/rmmod are also a builtin in ash.static.
#

# hardcoded configurable options
# Default maximum size of dynamic ramdisk in kilobytes
RAMSIZE=1000000
# End of options

# Don't allow interrupt signals
trap "" 1 2 3 15

MODULE_DIRS="/cdrom/KNOPPIX/modules /cdrom2/KNOPPIX/modules /modules /modules/scsi"

# Misc functions

# Builtin filesystems
BUILTIN_FS="iso9660 ext2 vfat"

mountit(){
# Usage: mountit src dst "options"
# Uses builtin mount of ash.static
for fs in $BUILTIN_FS; do
if test -b $1; then
 options="$3"
 case "$fs" in vfat)
  # We REALLY need this for INSERT on DOS-filesystems
  shortname="shortname=winnt"
  [ -n "$options" ] && options="$options,$shortname" || options="-o $shortname"
 ;;
 esac
 mount -t $fs $options $1 $2 >/dev/null 2>&1 && return 0
fi
done
return 1
}

FOUND_SCSI=""
FOUND_INSERT=""
INTERACTIVE=""

# Clean input/output
exec >/dev/console </dev/console 2>&1

# Reset fb color mode
RESET="]R"
# ANSI COLORS
# Erase to end of line
CRE="[K"
# Clear and reset Screen
CLEAR="c"
# Normal color
NORMAL="[0;39m"
# RED: Failure or error message
RED="[1;31m"
# GREEN: Success message
GREEN="[1;32m"
# YELLOW: Descriptions
YELLOW="[1;33m"
# BLUE: System mesages
BLUE="[1;34m"
# MAGENTA: Found devices or drivers
MAGENTA="[1;35m"
# CYAN: Questions
CYAN="[1;36m"
# BOLD WHITE: Hint
WHITE="[1;37m"

# Clear screen with colormode reset
# echo "$CLEAR$RESET"
# echo "$CLEAR"
# Just go to the top of the screen
# echo -n "[H[J"
echo ""
# Be verbose
echo "${WHITE}Welcome to ${BLUE}INSERT${WHITE} - the live linux from Inside Security!${NORMAL}"
echo ""
echo ""

# We only need the builtin commands and /static at this point
PATH=/static
export PATH

umask 022

# Mount /proc and /dev/pts
mount -t proc /proc /proc

# Disable kernel messages while probing modules in autodetect mode
echo "0" > /proc/sys/kernel/printk

# Kernel 2.6
mount -t sysfs /sys /sys >/dev/null 2>&1

# Read boot command line with builtin cat command
CMDLINE="$(cat /proc/cmdline)"

# Check if we are in interactive startup mode
case "$CMDLINE" in *BOOT_IMAGE=expert\ *) INTERACTIVE="yes"; :>/interactive; ;; esac
case "$CMDLINE" in *modules-disk*) INTERACTIVE="yes"; ;; esac
case "$CMDLINE" in *BOOT_IMAGE=debug\ *|*\ debug\ *|*\ debug) DEBUG="yes"; ;; esac
# Does the user want to skip scsi detection?
NOSCSI=""
case "$CMDLINE" in *noscsi*|*nobootscsi*) NOSCSI="yes"; ;; esac
case "$CMDLINE" in *nousb*|*nobootusb*) NOUSB="yes"; ;; esac
case "$CMDLINE" in *usbub*|*bootusbub*) USBUB="yes"; ;; esac
case "$CMDLINE" in *nofirewire*|*nobootfirewire*) NOFIREWIRE="yes"; ;; esac
NOCD=""
case "$CMDLINE" in *fromhd*) NOCD="yes"; ;; esac
case "$CMDLINE" in *fromdvd*) FROMDVD="yes"; ;; esac
case "$CMDLINE" in *idecd*|*atapicd*) IDECD="yes"; ;; esac
case "$CMDLINE" in *noideraid*) NOIDERAID="yes"; ;; esac
USB2="ehci-hcd"
case "$CMDLINE" in *usb2no*) USB2=""; ;; esac
USB1="uhci-hcd ohci-hcd isp116x-hcd sl811-hcd"
case "$CMDLINE" in *usb1no*) USB1=""; ;; esac

INSERT_DIR="INSERT"
INSERT_NAME="INSERT"
case "$CMDLINE" in *insert_dir=*) INSERT_DIR="$insert_dir"; ;; esac
case "$CMDLINE" in *insert_name=*) INSERT_NAME="$insert_name"; ;; esac

# Run a shell if in debug mode
stage=1
rundebugshell(){
if [ -n "$DEBUG" ]; then
echo "${CRE}${BLUE}Starting intermediate Shell stage $stage as requested by \"debug\" option.${NORMAL}"
echo "${CRE}${BLUE}Type \"exit\" to continue with normal bootup.${NORMAL}"
[ -x /static/ash ] && /static/ash || /bin/bash
fi
}

# Mount module disk
mountmodules(){
TYPE="$1"; shift
echo -n "${CRE}${CYAN}Please insert ${TYPE} modules disk and hit Return. ${NORMAL}"
read a
echo -n "${CRE}${BLUE}Mounting ${TYPE} modules disk... ${NORMAL}"
# We always mount over /modules/scsi (because it's there ;-)
if mountit /dev/fd0 /modules/scsi "-o ro"; then
echo "${GREEN}OK.${NORMAL}"
return 0
fi
echo "${RED}NOT FOUND.${NORMAL}"
return 1
}

# Unmount module disk
umountmodules(){
TYPE="$1"; shift
echo -n "${CRE}${BLUE}Unmounting ${TYPE} modules disk... ${NORMAL}"
umount /modules/scsi 2>/dev/null
echo "${GREEN}DONE.${NORMAL}"
}

# Ask user for modules
askmodules(){
TYPE="$1"; shift
echo "${BLUE}${TYPE} modules available:${WHITE}"
c=""; for m in "$@"; do
if test -r "/modules/scsi/$m"; then
test -z "$c"  && { echo -n "	$m"; c="1"; } || { echo "		$m"; c=""; }
fi
done
[ -n "$c" ] && echo ""
echo "${CYAN}Load ${TYPE} Modules?${NORMAL}"
echo "${CYAN}[Enter full filename(s) (space-separated), Return for autoprobe, ${WHITE}n${CYAN} for none] ${NORMAL}"
echo -n "${CYAN}insmod module(s)> ${NORMAL}"
read MODULES
case "$MODULES" in n|N) MODULES=""; ;; y|"")  MODULES="$*"; ;; esac
}

# Try to load the given module with optional parameters
# module can be a full path or a module.ko name
# (in which case $MODULE_DIRS is searched).
# loadmodule module options...
loadmodule(){
 MODULE="$1"; shift
 INSMOD=""
 # Find insmod in CURRENT file system configuration
 for p in $MODULE_DIRS /static; do
  checkfor="$p/insmod"
  if test -x "$checkfor"; then
   INSMOD="$checkfor"; break
  fi
 done
 # At last resort, try builtin insmod
 test -z "$INSMOD" && INSMOD="insmod" # builtin insmod
 LOAD=""
 for p in $MODULE_DIRS; do
  for ext in "" ".ko" ".o"; do
   checkfor="$p/$MODULE$ext"
   if test -r "$checkfor"; then
    LOAD="$checkfor"
    break 2
   fi
  done
 done
 test -n "$LOAD" || return 1
 # For a new process to avoid crashing our main shell
 echo "$INSMOD $LOAD" "$@" | /static/ash
 return $?
}

# Load many modules at once
# loadmodules TYPE(comment) module ...
loadmodules(){
 TYPE="$1"; shift
 test -n "$INTERACTIVE" && echo "6" > /proc/sys/kernel/printk
 for m in "$@"; do
  echo -n "${CRE}${BLUE}Probing ${TYPE}... ${MAGENTA}$m${NORMAL}"
  if loadmodule "$m" >/dev/null 2>&1; then
   case "$TYPE" in scsi|SCSI) FOUND_SCSI="yes"; ;; esac
  fi
 done
 test -n "$INTERACTIVE" && echo "0" > /proc/sys/kernel/printk
 echo -n "${CRE}"
}
unloadmodule() {
 MODULE="$1"
 RMMOD=""
 # Find insmod in CURRENT file system configuration
 for p in $MODULE_DIRS /static; do
  checkfor="$p/rmmod"
  if test -x "$checkfor"; then
   RMMOD="$checkfor"; break
  fi
 done
 # At last resort, try builtin insmod
 test -z "$RMMOD" && RMMOD="rmmod" # builtin rmmod
 # For a new process to avoid crashing our main shell
 echo "$RMMOD" "$MODULE" | /static/ash
 return $?
}

ISA_SCSI="aha1740.ko aha1542.ko aha152x.ko pas16.ko psi240i.ko qlogicfas.ko qlogicfc.ko seagate.ko t128.ko u14-34f.ko wd7000.ko"
SCSI_PROBE="$ISA_SCSI"
# Trying to do kind of /proc/pci hardware detection
# SCSI detection using /sys/devices
for d in /sys/devices/*/*; do
 if test -r "$d"/class -a -r "$d"/vendor -a -r "$d"/device; then
  read CLASS  < "$d"/class 2>/dev/null
  case "$CLASS" in 0x0100*)
   read VENDOR < "$d"/vendor 2>/dev/null
   read DEVICE < "$d"/device 2>/dev/null
   case "$VENDOR:$DEVICE" in
    *1000:*00[0-2]?) SCSI_PROBE="$SCSI_PROBE sym53c8xx.ko" ;;
    *1000:*040?|*1000:*196?|*101e:*196?|*1028:*000[ef]|*1028:*0013) SCSI_PROBE="$SCSI_PROBE megaraid_mbox.ko" ;;
    *1000:*04[1-9]?|*1028:*0015) SCSI_PROBE="$SCSI_PROBE megaraid_sas.ko" ;;
    *1001:*9100|*1101:*) SCSI_PROBE="$SCSI_PROBE initio.ko" ;;
    *9005:*80??) SCSI_PROBE="$SCSI_PROBE aic79xx.ko" ;;
    *9004:*|*9005:*00??) SCSI_PROBE="$SCSI_PROBE aic7xxx.ko" ;;
    *1011:*|*1028:*000[1-9a]|*9005:*02[08]?) SCSI_PROBE="$SCSI_PROBE aacraid.ko" ;;
    *1014:*002e|*1014:*01bd|*9005:*0250) SCSI_PROBE="$SCSI_PROBE ips.ko" ;;
    *1014:*0[1-2]8?|*1069:*|*9005:*0503) SCSI_PROBE="$SCSI_PROBE ipr.ko" ;;
    *1022:*) SCSI_PROBE="$SCSI_PROBE tmscsim.ko" ;;
    *1044:*) SCSI_PROBE="$SCSI_PROBE dpt_i2o.ko" ;;
    *1077:*1???) SCSI_PROBE="$SCSI_PROBE qla1280.ko" ;;
    *1077:*21??) SCSI_PROBE="$SCSI_PROBE qla2xxx.ko qla2100.ko" ;;
    *1077:*22??) SCSI_PROBE="$SCSI_PROBE qla2xxx.ko qla2200.ko" ;;
    *1077:*23[0-1]?) SCSI_PROBE="$SCSI_PROBE qla2xxx.ko qla2300.ko" ;;
    *1077:*232?) SCSI_PROBE="$SCSI_PROBE qla2xxx.ko qla2322.ko" ;;
    *1077:*24??) SCSI_PROBE="$SCSI_PROBE qla2xxx.ko" ;;
    *1077:*63??) SCSI_PROBE="$SCSI_PROBE qla2xxx.ko qla6312.ko" ;;
    *10df:*) SCSI_PROBE="$SCSI_PROBE lpfc.ko" ;;
    *10fc:*|*1145:*) SCSI_PROBE="$SCSI_PROBE nsp32.ko" ;;
    *1101:*) SCSI_PROBE="$SCSI_PROBE a100u2w.ko" ;;
    *1191:*) SCSI_PROBE="$SCSI_PROBE atp870u.ko" ;;
    *134a:*) SCSI_PROBE="$SCSI_PROBE dmx3191d.ko" ;;
    *1de1:*) SCSI_PROBE="$SCSI_PROBE dc395x.ko" ;;
    *9005:*8???) SCSI_PROBE="$SCSI_PROBE aic79xx.ko" ;;
    *104b:*) SCSI_PROBE="$SCSI_PROBE BusLogic.ko" ;;
    *1[0d]e1:*) SCSI_PROBE="$SCSI_PROBE dc395x.ko" ;;
    *1000:*00[34]?) SCSI_PROBE="$SCSI_PROBE mptscsih.ko" ;;
    *10cd:*) SCSI_PROBE="$SCSI_PROBE advansys.ko" ;;
    *1191:*) SCSI_PROBE="$SCSI_PROBE atp870u.ko" ;;
    *134a:*) SCSI_PROBE="$SCSI_PROBE dtc.ko" ;;
    *1d44:*) SCSI_PROBE="$SCSI_PROBE eata.ko" ;;
    *1036:*) SCSI_PROBE="$SCSI_PROBE fdomain.ko" ;;
    *1256:*4201) SCSI_PROBE="$SCSI_PROBE pci2220i.ko" ;;
    *1256:*5201) SCSI_PROBE="$SCSI_PROBE pci2000.ko" ;;
    *1022:*) SCSI_PROBE="$SCSI_PROBE tmscsim.ko" ;;
    *6356:*) SCSI_PROBE="$SCSI_PROBE ultrastor.ko" ;;
    *13c1:*) SCSI_PROBE="$SCSI_PROBE 3w-xxxx.ko" ;;
   esac
   ;;
  esac
 fi
done

if test -n "$INTERACTIVE"; then
# Let the user select interactively
askmodules SCSI $(cd /modules/scsi; echo *.ko)
else
# these are the autoprobe-safe modules
MODULES="$SCSI_PROBE"
fi
test -z "$NOSCSI" && test -n "$MODULES" && loadmodules SCSI $MODULES
# End of SCSI check

# Check for IDE-Raid devices
if test -z "$NOIDERAID"; then
( cd /modules/scsi; { loadmodule ataraid.ko >/dev/null 2>&1 && loadmodule silraid.ko >/dev/null 2>&1 ; } || loadmodule medley.ko >/dev/null 2>&1 || loadmodule pdcraid.ko >/dev/null 2>&1 )
fi
# End of IDE-Raid check

# Check for USB, use modules on bootfloppy first
if test -z "$NOUSB"; then
  echo -n "${CRE}${BLUE}Checking for USB...${NORMAL}"
  if loadmodule usbcore.ko >/dev/null 2>&1; then
    FOUNDUSB=""
    sleep 1

    for i in $USB2 $USB1; do
      loadmodule $i >/dev/null 2>&1 && FOUNDUSB="yes"
      sleep 1
    done
    if test -n "$FOUNDUSB"; then
      if test -n "$USBUB"; then
        loadmodule ub.ko >/dev/null 2>&1
      else
        loadmodule libusual.ko >/dev/null 2>&1
        sleep 1
	loadmodule usb-storage.ko >/dev/null 2>&1
	sleep 3
      fi
    else
      # For an unknown reason, unloading usbcore hangs sometimes
      # rmmod usbcore >/dev/null 2>&1
      true
    fi
  fi
  echo -n "${CRE}"
fi
# End of USB check

# Check for Firewire, use modules on bootfloppy first
if test -z "$NOFIREWIRE"; then
  echo -n "${CRE}${BLUE}Checking for Firewire...${NORMAL}"
  if loadmodule ieee1394.ko >/dev/null 2>&1; then
    FOUNDFIREWIRE=""
    for i in ohci1394.ko; do
      echo -n "${CRE}${BLUE}Loading $i...${NORMAL}"
      loadmodule "$i" >/dev/null 2>&1 && FOUNDFIREWIRE="yes"
    done
    if test -n "$FOUNDFIREWIRE"; then
      echo -n "${CRE}${BLUE}Loading sbp2.ko...${NORMAL}"
      loadmodule sbp2.ko serialize_io=1 >/dev/null 2>&1
    else
      # For an unknown reason, unloading ieee1394 hangs smetimes
      # echo -n "${CRE}${BLUE}Unloading ieee1394...${NORMAL}"
      # rmmod ieee1394 >/dev/null 2>&1
      true
    fi
  fi
  echo -n "${CRE}"
fi
# End of FIREWIRE check

# Unfortunately, hotpluggable devices tend to need some time in order to register
if test -n "$FOUNDUSB" -o -n "$FOUNDFIREWIRE"; then
echo -n "${CRE}${BLUE}Scanning for USB/Firewire devices... ${NORMAL}"
if test -n "$FOUNDFIREWIRE"; then
# Wait for driver to register
sleep 3
# Kernel 2.6 does this automatically
case "$(cat /proc/version 2>/dev/null)" in *version\ 2.6.*) ;; *) for host in 0 1 2 3 4 5 6 7; do for channel in 0 1; do for id in 0 1 2 3 4 5 6 7; do echo "scsi add-single-device $host $channel $id 0" >/proc/scsi/scsi 2>/dev/null; done; done; done ;; esac
fi
sleep 3
echo "${BLUE}Done.${NORMAL}"
fi

# Check for misc modules in expert mode
if test -n "$INTERACTIVE"; then
another=""; answer=""
while test "$answer" != "n" -a "$answer" != "N"; do
echo -n "${CYAN}Do you want to load additional modules from$another floppy disk? [${WHITE}Y${CYAN}/n] ${NORMAL}"
another=" another"
read answer
case "$answer" in n*|N*) break; ;; esac
if mountmodules new; then
askmodules new $(cd /modules/scsi; echo *.ko)
test -n "$MODULES" && loadmodules new $MODULES
umountmodules current
fi
done
fi
# All interactively requested modules should be loaded now.

# Give USB-Storage devices some more time to register
if test -d /proc/scsi/usb-storage; then
 echo -n "${CRE}${BLUE}Allowing slow USB-devices some more time to register...${NORMAL}"
 ash -c "sleep 6"
 echo "${BLUE}Ok.${NORMAL}"
fi

# Check for ide-scsi supported CD-Roms et al.
test -r /proc/scsi/scsi && FOUND_SCSI="yes"

# Disable kernel messages again
echo "0" > /proc/sys/kernel/printk

# We now enable DMA right here, for faster reading/writing from/to IDE devices
# in FROMHD or TORAM mode
case "$CMDLINE" in *\ nodma*) ;; *)
 for d in $(cd /proc/ide 2>/dev/null && echo hd[a-z]); do
 if test -d /proc/ide/$d; then
  MODEL="$(cat /proc/ide/$d/model 2>/dev/null)"
  test -z "$MODEL" && MODEL="[GENERIC IDE DEVICE]"
  echo "${BLUE}Enabling DMA acceleration for: ${MAGENTA}$d    ${YELLOW}[${MODEL}]${NORMAL}"
  echo "using_dma:1" >/proc/ide/$d/settings
 fi
 done
 ;;
esac

stage=1
rundebugshell

# Now that the right SCSI driver is (hopefully) loaded, try to find CDROM
DEVICES="/dev/hd?"
test -n "$FOUND_SCSI" -a -z "$NOCD" && DEVICES="/dev/scd? /dev/scd?? $DEVICES"
test -n "$FOUNDUSB$FOUNDFIREWIRE" -a -z "$NOCD" && DEVICES="/dev/sr? $DEVICES"
# New: Also try parallel port CD-Roms [for Mike].
DEVICES="$DEVICES /dev/pcd?"
# New: also check HD partitions for a INSERT/INSERT image
test -n "$FOUND_SCSI" -a -z "$NOSCSI" && DEVICES="$DEVICES /dev/sd?[1-9] /dev/sd?[1-9][0-9]"
DEVICES="$DEVICES /dev/ub?[1-9] /dev/ub?[1-9][0-9] /dev/ub? /dev/hd?[1-9] /dev/hd?[1-9][0-9]"
# we also need the SCSI devices when booting from USB despite actually having SCSI
# (This make the above SCSI line somewhat redundant, and NOSCSI won't work here.)
DEVICES="$DEVICES /dev/sd?[1-9] /dev/sd?[1-9][0-9]"

case "$CMDLINE" in *fromhd=/dev/*) DEVICES="$fromhd"; ;; esac
# DRBL modify start
# Unset all devices if booted from initrd
case "$CMDLINE" in *frominitrd*) DEVICES=""; ;; esac
# DRBL modify end
for i in $DEVICES; do
echo -n "${CRE}${BLUE}Looking for CDROM in: ${MAGENTA}$i${NORMAL}   "
if mountit $i /cdrom "-o ro" >/dev/null 2>&1; then
 if test -r /cdrom/$INSERT_DIR/$INSERT_NAME; then
  echo -n "${CRE} ${GREEN}Accessing ${BLUE}INSERT${GREEN} CDROM at ${MAGENTA}$i${GREEN}...${NORMAL}"
  FOUND_INSERT="$i"
  break
 fi
 umount /cdrom
fi
done

# DRBL modify start
# Look for KNOPPIX directory without mounting anything
case "$CMDLINE" in *frominitrd*)
if test -f /cdrom/$INSERT_DIR/$INSERT_NAME
then
echo -n "${CRE} ${GREEN}Accessing INSERT image at ${MAGENTA}/cdrom/${INSERT_DIR}/${INSERT_NAME}${GREEN} on initrd...${NORMAL}" ;
FOUND_INSERT="initrd" ;
fi
;;
esac
# DRBL modify end

# Harddisk-installed script part version has been removed
# (INSERT can be booted directly from HD now).

mount_insert()
{
  if test -n "$FOUND_INSERT" -a -r "$1/$INSERT_DIR/$INSERT_NAME"; then
    # Recheck for modules dir.
    # If /cdrom/boot/modules is gone, try /cdrom/INSERT/modules
    # DEBUG
    # echo "6" > /proc/sys/kernel/printk
    loadmodule loop.ko >/dev/null 2>&1
    loadmodule squashfs.ko >/dev/null 2>&1
    /static/mount -t squashfs $1/$INSERT_DIR/$INSERT_NAME /INSERT -o loop,ro >/dev/null 2>&1 || FOUND_INSERT=""
  fi
}

remount_insert()
{
  if test -r $TARGET/$INSERT_DIR/$INSERT_NAME; then
    /static/umount /INSERT
    unloadmodule squashfs
    #/static/losetup -d /dev/loop0
    unloadmodule loop
    /static/umount $SOURCE	# unmount CD
    [ -n "$SOURCE2" ] && umount $SOURCE2  # umount possible loop-device
    mount_insert $TARGET
  else
    echo "${CRE} ${RED}Warning: Changing to $TARGET failed.${NORMAL}"
    return 1
  fi
  
  return 0
}

boot_from()
{
  # preparations
  /bin/mkdir $TARGET

  SOURCE_DEV=$(echo $CMDLINE | /usr/bin/tr ' ' '\n' | /bin/sed -n '/bootfrom=/s/.*=//p' | /usr/bin/tail -1)
  
  LOOP_DEV=$(echo $SOURCE_DEV | /usr/bin/gawk -F/ '{ print $1 "/" $2 "/" $3 }')
  ISO_PATH=$(echo $SOURCE_DEV | /bin/sed "s|$LOOP_DEV||g" )
  case "$ISO_PATH" in /*.[iI][sS][oO]) ;; *) ISO_PATH="" ;; esac
  LOOP_SOURCE=""
  
  # load filesystems
  /INSERT/sbin/modprobe reiserfs
  /INSERT/sbin/modprobe ext3
  /INSERT/sbin/modprobe fuse
  /INSERT/sbin/modprobe ntfs
 
  if [ -n "$ISO_PATH" ]; then
   LOOP_SOURCE="$TARGET.loop"
   LOOP_SOURCE2="$LOOP_SOURCE"
   TARGET_DEV="$LOOP_SOURCE$ISO_PATH"
   /bin/mkdir $LOOP_SOURCE
   /INSERT/sbin/modprobe loop

   /bin/mount -o ro $LOOP_DEV $LOOP_SOURCE || LOOP_SOURCE=""
   /bin/mount -n -o loop $LOOP_SOURCE2$ISO_PATH $TARGET
  else
   TARGET_DEV="$SOURCE_DEV"
   /bin/mount -n -o ro $SOURCE_DEV $TARGET
  fi
  if [ $? -ne 0 ]; then
   [ -n "$LOOP_SOURCE" ] && /bin/umount $LOOP_SOURCE
   echo -n "${CRE} ${RED}Accessing ${BLUE}INSERT${GREEN} CDROM failed. ${MAGENTA}$TARGET_DEV${RED} is not mountable.${NORMAL}"
   sleep 2
   return 1
  fi
  
  if test -r $TARGET/$INSERT_DIR/$INSERT_NAME ; then
   echo -n "${CRE} ${GREEN}Accessing INSERT CDROM at ${MAGENTA}$TARGET_DEV${GREEN}...${NORMAL}"
  else
   echo -n "${CRE} ${RED}Accessing ${BLUE}INSERT${GREEN} CDROM failed. Could not find $INSERT_DIR/$INSERT_NAME on ${MAGENTA}$TARGET_DEV${RED}.${NORMAL}"
   [ -n "$LOOP_SOURCE" ] && /bin/umount $LOOP_SOURCE
   umount $TARGET
   sleep 2
   return 1
  fi
  # remount the CD 
  remount_insert
}

copy_to()
{
  # preparations
  /bin/mkdir $TARGET
  COPY="$SOURCE/$INSERT_DIR"

  # look if we copy to hd or to ram
  SIZE="$(/usr/bin/du -s $COPY | /usr/bin/gawk '{print int($1*1.1)}')"
  test -n "$SIZE" || SIZE="256000"
  
  case "$1" in 
    ram)
      TARGET_DEV="/dev/shm"
      TARGET_DEV_DESC="ramdisk"
      FOUNDSPACE="$(/usr/bin/gawk '/MemTotal/{print $2}' /proc/meminfo)"
      /bin/mount -t tmpfs -o size=${SIZE}k $TARGET_DEV $TARGET
    ;;
    hd)
      TARGET_DEV=$(echo $CMDLINE | /usr/bin/tr ' ' '\n' | /bin/sed -n '/tohd=/s/.*=//p' | /usr/bin/tail -1)
      TARGET_DEV_DESC="$TARGET_DEV"
      # load filesystems
      /INSERT/sbin/modprobe reiserfs
      /INSERT/sbin/modprobe jbd
      /INSERT/sbin/modprobe ext3
      /INSERT/sbin/modprobe fuse
      FS="ext3 ext2 reiserfs vfat ntfs"
     MOUNTED=""
     for i in $FS; do
      if /INSERT/bin/mount -o rw -t "$i" "$TARGET_DEV" "$TARGET"; then
       MOUNTED="true"
       break
      fi
     done
     if test -z "$MOUNTED"; then
      echo -n "${CRE}${RED}Copying INSERT ${MEDIUM} failed. ${MAGENTA}$TARGET_DEV_DESC${RED} is not mountable.${NORMAL}"
      sleep 2
      return 1
     fi
     # check for enough free space
     USED_SPACE=0
     test -r $TARGET/$INSERT_DIR/$INSERT_NAME && USED_SPACE=$(/usr/bin/du -s $TARGET/$INSERT_DIR/$INSERT_NAME | /usr/bin/gawk '{ print $1 }')
     FOUNDSPACE="$(/bin/df -k $TARGET | /usr/bin/tail -1 | /usr/bin/gawk '{ print $4+int('$USED_SPACE') }')"
   ;;
   *)
     return 1
   ;;
  esac
 
  # sanity check

  if [ $FOUNDSPACE -lt $SIZE ]; then
   echo -n "${CRE} ${RED}Copying ${BLUE}INSERT${GREEN} CDROM failed. Not enough free space on ${MAGENTA}${TARGET_DEV_DESC}${RED}. Found: ${MAGENTA}${FOUNDSPACE}k${RED} Need: ${MAGENTA}${SIZE}k${RED} ${NORMAL}"
   sleep 2
   umount $TARGET
   return 1
  fi
 
  # do the real copy
  
  echo "${CRE} ${GREEN}Copying ${BLUE}INSERT${GREEN} CDROM to ${MAGENTA}$TARGET_DEV_DESC${GREEN}... Please be patient. ${NORMAL}"
  if [ -z "$COPY_COMMAND" -a -x /usr/bin/rsync ]; then
   # first cp the small files
   /usr/bin/rsync -a --exclude="$INSERT_DIR/$INSERT_NAME" $COPY $TARGET # Copy INSERT to $TARGET
   /usr/bin/rsync -a "$COPY/../isolinux" $TARGET
   /usr/bin/rsync -a "$COPY/../start.html" $TARGET
   /usr/bin/rsync -a "$COPY/../list.html" $TARGET
   /usr/bin/rsync -a "$COPY/../ntfs.html" $TARGET
   /usr/bin/rsync -a "$COPY/../usb.html" $TARGET
   /usr/bin/rsync -a "$COPY/../islogo.gif" $TARGET
   /usr/bin/rsync -a "$COPY/../autorun.bat" $TARGET
   /usr/bin/rsync -a "$COPY/../autorun.inf" $TARGET
   /usr/bin/rsync -a "$COPY/../cdrom.ico" $TARGET
   /usr/bin/rsync -a "$COPY/../islogo.gif" $TARGET
   /usr/bin/rsync -a "$COPY/../mkbootfloppy.sh" $TARGET
   /usr/bin/rsync -a "$COPY/../CHANGELOG" $TARGET
   /usr/bin/rsync -a "$COPY/../DISCLAIMER" $TARGET
   /usr/bin/rsync -a "$COPY/../Tools" $TARGET
   # then the big file with nice progress meter
   test -r $TARGET/$INSERT_DIR/$INSERT_NAME && /bin/rm -f $TARGET/$INSERT_DIR/$INSERT_NAME
   /usr/bin/rsync -a --progress --include="$INSERT_DIR/$INSERT_NAME" --include="$INSERT_DIR/" --exclude="*" $COPY $TARGET # Copy INSERT to $TARGET
  else
   "$COPY_COMMAND" $COPY $TARGET
  fi
  if [ "$?" -ne "0" ]; then
   echo -n "${CRE} ${RED}Copying ${BLUE}INSERT${GREEN} CDROM failed. ${MAGENTA}$TARGET_DEV_DESC${RED} possibly has not enough space left.${NORMAL}"
   sleep 2
   return 1
  fi

  stage=2
  rundebugshell

  # remount r/o
  /bin/mount -n -o remount,ro $TARGET
  remount_insert
}

mount_insert /cdrom

COPYTO=""
BOOTFROM=""
DO_REMOUNT=""
REAL_TARGET=""
UNIONFS=""

case "$CMDLINE" in *toram*) DO_REMOUNT="yes"; COPYTO="ram"; ;; esac
case "$CMDLINE" in *tohd=*) DO_REMOUNT="yes"; COPYTO="hd"; ;; esac
case "$CMDLINE" in *bootfrom=*) DO_REMOUNT="yes"; BOOTFROM="yes" ;; esac
 
# Remount later after copying/isoloading/driverloading?
# pre-test if everything succeeded
if  test -n "$DO_REMOUNT" -a -n "$FOUND_INSERT"; then
 # copy library cache 
 cat /INSERT/etc/ld.so.cache > /etc/ld.so.cache 
 echo "" 

 SOURCE="/cdrom"
 TARGET="/cdrom2"
 
 # first copy_to, then boot_from
 if [ -n "$COPYTO" ]; then
  copy_to $COPYTO && REAL_TARGET="$TARGET"
 fi
 if [ -n "$BOOTFROM" ]; then
  boot_from
  if [ "$?" -eq "0" ]; then
   # set new source / target paths
   REAL_TARGET="$TARGET"
   SOURCE2="$LOOP_SOURCE"
   SOURCE="/cdrom2"
   TARGET="/cdrom3"
  fi
 fi
fi
 
# Final test if everything succeeded.
if test -n "$FOUND_INSERT"; then
 # copy library cache
 cat /INSERT/etc/ld.so.cache > /etc/ld.so.cache
 echo ""

 UNIONFS=""
 loadmodule unionfs.ko 2>/dev/null && UNIONFS="yes"

 # Enable kernel messages
 echo "6" > /proc/sys/kernel/printk

 # Set paths
 echo -n "${CRE}${BLUE}Setting paths...${NORMAL}"
 PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:."
 export PATH

 # Debian weirdness
 /INSERT/bin/cp -a /INSERT/etc/alternatives /etc/ 2>/dev/null

 # Replace /sbin
 /INSERT/bin/rm -f /sbin
 /INSERT/bin/ln -sf /INSERT/sbin /sbin

 # From here, we should have all essential commands available.
 hash -r

 # Did we remount the source media ? 
 if  test -n "$REAL_TARGET"; then
  /bin/mount -n --move $REAL_TARGET /cdrom # move it back and go on to normal boot 
 fi

 # New in Kernel 2.4.x: tmpfs with variable ramdisk size.
 # We check for available memory anyways and limit the ramdisks
 # to a reasonable size.
 FOUNDMEM="$(/usr/bin/gawk '/MemTotal/{print $2}' /proc/meminfo)"
 TOTALMEM="$(/usr/bin/gawk 'BEGIN{m=0};/MemFree|Cached/{m+=$2};END{print m}' /proc/meminfo)"
 
 # Be verbose
 echo "${CRE}${BLUE}Total memory found: ${YELLOW}${FOUNDMEM}${BLUE} kB${NORMAL}"

 # Now we need to use a little intuition for finding a ramdisk size
 # that keeps us from running out of space, but still doesn't crash the
 # machine due to lack of Ram

 # Minimum size of additional ram partitions
 MINSIZE=20000
 # At least this much memory minus 30% should remain when home and var are full.
 MINLEFT=16000
 # Maximum ramdisk size
 MAXSIZE="$(expr $TOTALMEM - $MINLEFT)"
 # Default ramdisk size for ramdisk
 RAMSIZE="$(expr $TOTALMEM / 5)"

 # Create additional dynamic ramdisk.
 test -z "$RAMSIZE" -o "$RAMSIZE" -lt "$MINSIZE" && RAMSIZE="$MINSIZE"
 mkdir -p /ramdisk
 # tmpfs/varsize version, can use swap
 RAMSIZE=$(expr $RAMSIZE \* 4)
 echo -n "${CRE}${BLUE}Creating ${YELLOW}/ramdisk${BLUE} (dynamic size=${RAMSIZE}k) on ${MAGENTA}shared memory${BLUE}...${NORMAL}"
 # We need /bin/mount here for the -o size= option
 /bin/mount -t tmpfs -o "size=${RAMSIZE}k" /ramdisk /ramdisk 
 mkdir -p /ramdisk/tmp /ramdisk/home/insert /ramdisk/root && chmod 1777 /ramdisk/tmp && chown insert.insert /ramdisk/home/insert && ln -snf /ramdisk/home /home && ln -snf /ramdisk/root /root && mv /tmp /tmp.old && ln -s /ramdisk/tmp /tmp && rm -rf /tmp.old
 echo "${BLUE}Done.${NORMAL}"

 stage=3
 rundebugshell

 echo -n "${CRE}${BLUE}Creating unionfs and symlinks on ramdisk...${NORMAL}"
 mkdir -p /UNIONFS
 if test -n "$UNIONFS" && /bin/mount -t unionfs -o noatime,delete=whiteout,dirs=/ramdisk=rw:/INSERT=ro /UNIONFS /UNIONFS;then
  # We now have unionfs, copy some data from the initial ramdisk first
  cp -a /etc/fstab /etc/auto.mnt /etc/filesystems /etc/mtab /UNIONFS/etc/
  # /dev is a special case, it is now normally handled via udev
  UNIONDEV=""
  case "$CMDLINE" in *noudev*) UNIONDEV="dev"; ;; esac
  for i in bin boot etc $UNIONDEV sbin var lib opt root usr; do # Move directories to unionfs
   if test -d /$i; then
    mv /$i /$i.old && \
    /INSERT/lib/ld-linux.so.2 --library-path /INSERT/lib /INSERT/bin/ln -snf /UNIONFS/$i /$i && \
    rm -rf /$i.old
   else
    ln -snf /UNIONFS/$i /$i
   fi
  done
  for i in $(cd /UNIONFS; echo *);do # Create links for new stuff on /UNIONFS
    test "$i" = "home" -o "$i" = "tmp" && continue
    test -L "/$i" || test -d "/$i" || test -f "/$i" || ln -snf "/UNIONFS/$i" /$i
  done
  echo ""
  echo "${GREEN}>> Read-only CD system successfully merged with read-write /ramdisk.${NORMAL}"
 else
  echo -n "${CRE}${RED}ERROR: CANNOT UNITE READ-ONLY MEDIA AND INITIAL RAMDISK!${NORMAL}"
  /INSERT/sbin/halt -f -n
 fi
 # copy resolv.conf
 cp -a /INSERT/etc/dhcpc/resolv.conf /etc/dhcpc/ 2>/dev/null

 # copy the contents of the insert user's home dir
 # and some files from the CD root
 cp -ai /INSERT/home/insert /home/ 2>/dev/null
 cp -a /cdrom/*.html /home/insert/ 2>/dev/null
 cp -a /cdrom/*.pdf /home/insert/ 2>/dev/null
 cp -a /cdrom/*.gif /home/insert/ 2>/dev/null
 cp -a /cdrom/CHANGELOG /home/insert/ 2>/dev/null
 cp -a /cdrom/DISCLAIMER /home/insert/ 2>/dev/null

 # and make sure whom it belongs to
 chown -R insert.insert /home/insert

 # and of root's home dir
 #cp -ai /INSERT/root/* /root/ 2>/dev/null
 #cp -ai /INSERT/root/bin /root/ 2>/dev/null
 #cp -ai /INSERT/root/.[a-z]* /root/ 2>/dev/null

 # create writable directories for kernel and kernel modules
 mkdir -p /var/bin
 mkdir -p /var/lib/modules
 # ...and copy the stuff from the bootroot
 # (this is only a space saver - so we don't need these in /INSERT)
 # These are not only SCSI-modules, but I'm too lazy to create the correct
 # tree in /var/lib/modules/kernel/drivers and spread them like
 # in the original tree.
 # DRBL modify start
 # Only if no frominitrd (not PXE), we will copy vmlinuz to /var/bin/vmlinuz.
 # Since vmlinuz is got from server, not from CDROM.
 #cp /cdrom/isolinux/vmlinuz /var/bin/vmlinuz
 if [ -z "$(echo "$CMDLINE" | grep -iw "frominitrd")" ]; then 
   cp /cdrom/isolinux/vmlinuz /var/bin/vmlinuz
 fi
 # DRBL modify end
 cp -ai /modules/scsi/*.ko /var/lib/modules/
 cp -ai /modules/*.ko /var/lib/modules/

 # we need busybox for insert-remote
 mkdir /usr/share/insert-remote/busybox
 cp -ai /static/* /usr/share/insert-remote/busybox/

 # Clean up /
 /INSERT/bin/rm -rf /modules /static

 # Create empty utmp and wtmp
 :> /var/run/utmp
 :> /var/run/wtmp
 # Make SURE that these are files, not links!
 rm -rf /etc/ftpusers /etc/passwd /etc/shadow /etc/gshadow /etc/group \
	/etc/ppp /etc/isdn /etc/ssh /etc/ioctl.save \
	/etc/inittab /etc/network /etc/sudoers \
	/etc/init /etc/localtime /etc/dhcpc /etc/pnm2ppa.conf 2>/dev/null
 cp -a /INSERT/etc/ftpusers /INSERT/etc/passwd /INSERT/etc/shadow /INSERT/etc/gshadow \
	/INSERT/etc/group /INSERT/etc/ppp /INSERT/etc/isdn /INSERT/etc/ssh \
	/INSERT/etc/inittab /INSERT/etc/network /INSERT/etc/sudoers \
	/INSERT/sbin/init /INSERT/etc/dhcpc /etc/ 2>/dev/null

 # Extremely important, init crashes on shutdown if this is only a link
 :> /etc/ioctl.save
 :> /etc/pnm2ppa.conf

 # Kernel 2.6.9+x bug?
 chmod 1777 /tmp /var/tmp

 # Diet libc bug workaround
 /bin/cp -f /INSERT/etc/localtime /etc/localtime

 echo "${BLUE}Done.${NORMAL}"

 # Mount devpts, should be done much later
 #mount -t devpts /dev/pts /dev/pts 2>/dev/null

 # Clean up /etc/mtab (and - just in case - make a nice entry for looped ISO)
 /bin/egrep " /INSERT[0-9]* | /cdrom " /proc/mounts | sed 's|/dev/loop0 /cdrom \(.*\) 0 0|'$LOOP_SOURCE$ISO_PATH' /cdrom/ \1,loop=/dev/loop0 0 0|g' >> /etc/mtab

 # Now tell kernel where the real modprobe lives
 echo "/sbin/modprobe" > /proc/sys/kernel/modprobe

 # Change root device from /dev/fd0 to /dev/ram0
 echo "0x100" > /proc/sys/kernel/real-root-dev

 stage=4
 rundebugshell

 # Give control to the init process.
 echo "${CRE}${BLUE}Starting init process.${NORMAL}"
 rm -f /linuxrc
 exit 0

else
 echo "${CRE}${RED}Can't find ${BLUE}INSERT${INSERT} filesystem, sorry.${NORMAL}"
 echo "${RED}Dropping you to a (very limited) shell.${NORMAL}"
 echo "${RED}Press reset button to quit.${NORMAL}"
 echo ""
 echo "There are some additional builtin commands available:"
 echo "	cat        mount     umount"
 echo "	insmod     rmmod     lsmod"
 echo "	mkdir      rmdir     mount"
 echo "	fdisk      hdparm    dmesg"
 echo "	klogd      syslogd   ps"
 echo ""
 echo "Try it out. There are some more, thanks to busybox."
 echo ""
 PS1="insert# "
 export PS1
 echo "6" > /proc/sys/kernel/printk
 # Allow signals
 trap 1 2 3 15
 exec /static/ash
fi
